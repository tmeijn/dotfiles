# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# Add directories to $PATH
export PATH="$HOME/.local/bin:$PATH"
export PATH="$HOME/bin:$PATH"
export PATH="$HOME/.tfenv/bin:$PATH"
export PATH="$HOME/.krew/bin:$PATH"
export XDG_DATA_DIRS=$XDG_DATA_DIRS:~/.local/share/:~/.nix-profile/share:/usr/share

# Setup Go
export PATH="/usr/local/go/bin:$HOME/go/bin:$PATH"

# autocompletions config
source "$HOME/.bash_completions/lab-completions.bash"
source "$HOME/.bash_completions/aws-vault_completion.bash"
source <(kubectl completion bash)
complete -C "$HOME/.tfenv/bin/terraform" terraform
# Add autocomplete for the k alias
complete -F __start_kubectl k;
complete -C '$(which aws_completer)' aws

# Terraform
export TF_CLI_ARGS_plan="-lock=false"

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend
export PROMPT_COMMAND="history -a"

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=5000
HISTFILESIZE=10000

# Expand history commands
bind Space:magic-space

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

source /usr/share/doc/fzf/examples/key-bindings.bash
source "$HOME/.bash_completions/fzf.bash"

function hm() {
  pushd ~/dotfiles
	echo "Pulling latest changes..."
	git pull
  home-manager switch --flake .\#${1}
  popd
}

function g_commit_and_push() {
	local message="$1"
	git commit -am "${message}"
	git push
}

function g_setup_mr_branch() {
	local branch_name="$1"
	
	# Determine default branch on remote
	local default_branch="$(git remote show origin | sed -n '/HEAD branch/s/.*: //p')"
	
	# Make sure the default branch is up to date locally
	echo "default branch: '${default_branch}'. Updating default branch..."
	git switch "${default_branch}"
	git pull
	
	
	echo "creating branch '${branch_name}'..."
	git switch -c "${branch_name}" "${default_branch}"
	
	git push -u origin "${branch_name}"
	
	echo "Done!"
}

function tfinit() {

	_backend="${1}"
	_should_plan="${2:-true}"

	[ ! -d "backends" ] && echo "Backends directory does not exist!" && return

	if [ -f "backends/local.tfbackend" ]; then
		echo "Local backend file detected, setting in command"

		export TF_CLI_ARGS_init=-backend-config=backends/local.tfbackend
	fi

	if [ -z "${_backend}" ]; then
		echo "no backend selected"
		terraform init -reconfigure
	elif [ -n "${_backend}" ]; then
		[ ! -f "backends/${_backend}.tfbackend" ] && echo "Backend file does not exist!" && return
		terraform init -reconfigure -backend-config=backends/"${_backend}".tfbackend
		export TF_VAR_env="${_backend}"
	fi

	if [ "${_should_plan}" = "true" ]; then
		echo "==== Executing Terraform plan command... ===="
		terraform plan -out=plan.tfplan
fi

}

function aws_assume_role() {
	local role_arn="$1"
	export $(printf "AWS_ACCESS_KEY_ID=%s AWS_SECRET_ACCESS_KEY=%s AWS_SESSION_TOKEN=%s" \
	$(aws sts assume-role \
	--role-arn ${role_arn} \
	--role-session-name MySessionName \
	--query "Credentials.[AccessKeyId,SecretAccessKey,SessionToken]" \
	--output text))
}

function set_win_title(){
    echo -ne "\033]0; "$PWD" \007"
}

starship_precmd_user_func="set_win_title"

alias pbcopy='xclip -selection clipboard'
alias pbpaste='xclip -selection clipboard -o'
