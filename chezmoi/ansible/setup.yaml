---
- name: Machine setup
  hosts: localhost
  become: true
  remote_user: tmeijn
  connection: local
  gather_facts: true
  vars:
    arch_mapping:  # Map ansible architecture {{ ansible_architecture }} names to Docker's architecture names
      x86_64: amd64
      aarch64: arm64
    # Your Docker daemon configuration as a JSON object
    docker_config:
      registry-mirrors:
        - "https://mirror.gcr.io"
      features:
        containerd-snapshotter: true
    # DisplayLink Driver
    synaptics_package_url: "https://www.synaptics.com/sites/default/files/Ubuntu/pool/stable/main/all/synaptics-repository-keyring.deb"
    synaptics_package_path: "/tmp/synaptics-repository-keyring.deb"

  tasks:
    - name: Setting facts based on ansible_architecture
      block:
        - name: Set facts for amd64
          ansible.builtin.set_fact:
            aws_ssm_plugin_deb_url: https://s3.amazonaws.com/session-manager-downloads/plugin/latest/ubuntu_64bit/session-manager-plugin.deb
            teams_for_linux_deb_url: https://github.com/IsmaelMartinez/teams-for-linux/releases/download/{{ teams_for_linux_version }}/teams-for-linux_{{ teams_for_linux_version | regex_replace('^v','') }}_amd64.deb
            vscode_deb_url: https://code.visualstudio.com/sha/download?build=stable&os=linux-deb-x64
          when: ansible_architecture == 'x86_64'

        - name: Set facts for arm64
          ansible.builtin.set_fact:
            aws_ssm_plugin_deb_url: https://s3.amazonaws.com/session-manager-downloads/plugin/latest/ubuntu_arm64/session-manager-plugin.deb
            teams_for_linux_deb_url: https://github.com/IsmaelMartinez/teams-for-linux/releases/download/{{ teams_for_linux_version }}/teams-for-linux_{{ teams_for_linux_version | regex_replace('^v','') }}_arm64.deb
            vscode_deb_url: https://code.visualstudio.com/sha/download?build=stable&os=linux-deb-arm64
          when: ansible_architecture == 'aarch64'

    - name: Install core packages
      include_tasks:
        file: tasks/install_core_packages.yaml
        apply:
          tags: [core-packages]
      tags: [core-packages]

    - name: Install packages
      ansible.builtin.apt:
        pkg:
          - bubblewrap
          - build-essential
          - curl
          - ffmpeg
          - gawk
          - git
          - gnome-shell-extensions
          - gnome-tweaks
          - graphviz
          - gtk2-engines-murrine
          - jc
          - kitty # Our terminal!
          - libyaml-dev # Needed to make Ruby installation work. Used in GitLab Runbooks
          - lshw
          - nala
          - network-manager-l2tp
          - network-manager-l2tp-gnome
          - pandoc
          - pavucontrol
          - poppler-utils
          - postgresql-client
          - px
          - qemu-system
          - timeshift
          - vim
          - virt-manager
          - xclip
        update_cache: true

    - name: Install KNMI specific packages
      ansible.builtin.apt:
        pkg:
          # Packages needed for the VPN
          - openconnect
          - network-manager-openconnect
          - network-manager-openconnect-gnome
          # Packages needed for Camera?
          - gstreamer1.0-icamera
        update_cache: true



    - name: "[BLOCK] Setting up DisplayLink drivers"
      when: false # TODO: Enable when drivers are present again. These are not present for 25.04 as of writing.
      block:
        - name: Download Synaptics repository keyring package
          get_url:
            url: "{{ synaptics_package_url }}"
            dest: "{{ synaptics_package_path }}"
            mode: '0644'
        - name: Remove standalone DisplayLink driver (if present)
          ansible.builtin.apt:
            name: displaylink
            state: absent
          ignore_errors: true

        - name: Install Synaptics APT Repository keyring
          ansible.builtin.apt:
            deb: "{{ synaptics_package_path }}"
            state: present

        - name: Update APT cache
          ansible.builtin.apt:
            update_cache: true

        - name: Install DisplayLink driver
          ansible.builtin.apt:
            name: displaylink-driver
            state: present
            update_cache: true

        - name: Verify DisplayLink driver installation
          ansible.builtin.command: dpkg -l displaylink-driver
          register: displaylink_status
          changed_when: false

        - name: Clean up downloaded package
          ansible.builtin.file:
            path: "{{ synaptics_package_path }}"
            state: absent

    - name: Ensure packages are absent
      ansible.builtin.apt:
        pkg:
          - gnome-shell-extension-ubuntu-dock # This cannot be disabled, see https://askubuntu.com/q/1498249.
        state: absent

    - name: Set Kitty as default
      ansible.builtin.shell: |
        sudo update-alternatives --set x-terminal-emulator "$(which kitty)"
      changed_when: false

    - name: "[BLOCK] Setting up Flatpak"
      block:
        - name: Install Flatpak and dependencies if not present
          ansible.builtin.package:
            name:
              - flatpak
              - gnome-software-plugin-flatpak
        - name: Setup Flathub as a remote
          community.general.flatpak_remote:
            name: flathub
            state: present
            flatpakrepo_url: https://dl.flathub.org/repo/flathub.flatpakrepo
        - name: Install Flatpak packages
          community.general.flatpak:
            name:
              - org.videolan.VLC
              - io.github.seadve.Kooha
              - md.obsidian.Obsidian
              - dev.vencord.Vesktop
              - com.github.IsmaelMartinez.teams_for_linux
              - com.slack.Slack
              - com.github.qarmin.czkawka
              - org.keepassxc.KeePassXC
            state: present

    - name: Install Firefox as snap (arm64 is not available yet on Flatpak)
      community.general.snap:
        name:
          - firefox
          - raindrop

    - name: "[BLOCK] Install AWS Session Manager Plugin if not present"
      block:
        - name: ==== Check if plugin is present
          become: false
          ansible.builtin.shell:
            cmd: command -v session-manager-plugin
          register: aws_ssm_plugin_installed
          ignore_errors: true
          changed_when: false

        - name: ==== Download Plugin
          ansible.builtin.apt:
            deb: "{{ aws_ssm_plugin_deb_url }}"
            state: present
          when: aws_ssm_plugin_installed is failed

    - name: "[BLOCK] Install Visual Studio Code if not present"
      block:
        - name: ==== Check if VSCode is present
          become: false
          ansible.builtin.shell:
            cmd: command -v code
          register: vscode_installed
          ignore_errors: true
          changed_when: false

        - name: ==== Download VSCode
          ansible.builtin.apt:
            deb: "{{ vscode_deb_url }}"
            state: present
          when: vscode_installed is failed

    - name: "[BLOCK] Add repo, install and configure Docker"
      block:
        - name: Download Docker's official GPG key
          ansible.builtin.get_url:
            url: https://download.docker.com/linux/ubuntu/gpg
            dest: /etc/apt/keyrings/docker.asc
            mode: "0644"
        - name: Add Docker repository
          ansible.builtin.apt_repository:
            repo: >-
              deb [arch={{ arch_mapping[ansible_architecture] | default(ansible_architecture) }}
              signed-by=/etc/apt/keyrings/docker.gpg]
              https://download.docker.com/linux/ubuntu {{ ansible_lsb.codename }} stable
            filename: docker
            state: present
        - name: Install Docker and related packages
          ansible.builtin.apt:
            pkg:
              - docker-ce
              - docker-ce-cli
              - containerd.io
            state: present
            update_cache: true
        - name: Add Docker group
          ansible.builtin.group:
            name: docker
            state: present
        - name: Add user to Docker group
          ansible.builtin.user:
            name: "{{ ansible_user }}"
            groups: docker
            append: true
        - name: Ensure /etc/docker directory exists
          file:
            path: /etc/docker
            state: directory
            mode: '0755'
        - name: Copy Docker daemon configuration
          copy:
            content: "{{ docker_config | to_nice_json }}"
            dest: /etc/docker/daemon.json
            mode: '0644'
        - name: Enable and start Docker services
          ansible.builtin.systemd:
            name: "{{ item }}"
            enabled: true
            state: started
          loop:
            - docker.service
            - containerd.service

    - name: "[BLOCK] Add repo, install and configure Incus"
      block:
        - name: Add Incus's official GPG key
          ansible.builtin.get_url:
            url: https://pkgs.zabbly.com/key.asc
            dest: /etc/apt/keyrings/zabbly.asc
        # NOTE: hardcoded to noble as Incus does not do non-LTS releases
        - name: Add Incus repository file
          ansible.builtin.copy:
            dest: "/etc/apt/sources.list.d/incus.sources"
            content: |
              Types: deb
              URIs: https://pkgs.zabbly.com/incus/stable
              Suites: noble
              Components: main
              Architectures: {{ arch_mapping[ansible_architecture] | default(ansible_architecture) }}
              Signed-By: /etc/apt/keyrings/zabbly.asc
            mode: '0644'
        - name: Install Incus and related packages
          ansible.builtin.apt:
            pkg:
              - incus
            state: present
            update_cache: true
        - name: Add incus-admin group
          ansible.builtin.group:
            name: incus-admin
            state: present
        - name: Add user to incus-admin group
          ansible.builtin.user:
            name: "{{ ansible_user }}"
            groups: incus-admin
            append: true

      # NOTE: this should be absolutely last as afterwards restart is needed.
    - name: Install Pop Shell if not present
      become: false
      block:
        - name: Check if extension is present
          ansible.builtin.shell:
            cmd: gnome-extensions list | grep pop-shell@system76.com -q
          register: gnome_pop_shell_installed
          ignore_errors: true
          changed_when: false

        - name: Download Plugin
          ansible.builtin.shell: |
            npm -g i typescript
            git clone --recursive --depth 1 --shallow-submodules --branch master_noble https://github.com/pop-os/shell.git
            cd shell
            make local-install
            cd ..
            rm -rf shell
          when: gnome_pop_shell_installed is failed

    - name: Install Nerd Fonts if not present
      become: false
      vars:
        nerd_fonts_dir: "/home/{{ ansible_env.SUDO_USER }}/.local/share/fonts/NerdFonts"
        nerd_fonts_list:
          - "FiraCode"
          - "Hack"
          - "JetBrainsMono"
        nerd_fonts_base_url: "https://github.com/ryanoasis/nerd-fonts/releases/latest/download"
      block:
        - name: Ensure fonts directory exists
          file:
            path: "{{ nerd_fonts_dir }}"
            state: directory
            mode: '0755'

        - name: Check if font files for each font exist
          shell: |
            ls {{ nerd_fonts_dir }} | grep -qi "{{ item }}"
          register: font_check
          changed_when: false
          failed_when: false
          loop: "{{ nerd_fonts_list }}"
          loop_control:
            label: "{{ item }}"

        - name: Download Nerd Font if not installed
          ansible.builtin.get_url:
            url: "{{ nerd_fonts_base_url }}/{{ item }}.zip"
            dest: "/tmp/{{ item }}.zip"
            mode: '0644'
          when: font_check.results[ansible_loop.index0].rc != 0
          loop: "{{ nerd_fonts_list }}"
          loop_control:
            label: "{{ item }}"
            extended: true

        - name: Extract font files
          ansible.builtin.unarchive:
            src: "/tmp/{{ item }}.zip"
            dest: "{{ nerd_fonts_dir }}"
            remote_src: true
          when: font_check.results[ansible_loop.index0].rc != 0
          loop: "{{ nerd_fonts_list }}"
          loop_control:
            label: "{{ item }}"
            extended: true

        - name: Clean up temporary font zip
          ansible.builtin.file:
            path: "/tmp/{{ item }}.zip"
            state: absent
          when: font_check.results[ansible_loop.index0].rc != 0
          loop: "{{ nerd_fonts_list }}"
          loop_control:
            label: "{{ item }}"
            extended: true

        - name: Update font cache
          ansible.builtin.command: fc-cache -fv
