HISTFILESIZE=100000
HISTSIZE=10000

shopt -s histappend
shopt -s checkwinsize
shopt -s extglob
shopt -s globstar
shopt -s checkjobs

alias k='kubectl'
alias l='ls -CF'
alias la='ls -A'
alias ll='ls -alF'
alias pls='sudo $(fc - ln - 1)'
alias tfapply='terraform apply plan.tfplan'
alias tfcopyplan='terraform show -no-color plan.tfplan | pbcopy'
alias tfplan='terraform plan -out=plan.tfplan'
alias gt='git-town'
alias pbcopy='xclip -selection clipboard'
alias pbpaste='xclip -selection clipboard -o'
alias code='flatpak run com.visualstudio.code'


# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    # alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend
export PROMPT_COMMAND="history -a"

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=5000
HISTFILESIZE=10000

# Expand history commands
bind Space:magic-space

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

# Setup Terraform caching.
mkdir -p "$HOME/.terraform.d/plugin-cache"
export TF_PLUGIN_CACHE_DIR="$HOME/.terraform.d/plugin-cache"
export TF_PLUGIN_CACHE_MAY_BREAK_DEPENDENCY_LOCK_FILE="true"
# Set Terraform plan lock to default false.
export TF_CLI_ARGS_plan="-lock=false"

# Note: Aqua itself is installed by a Chezmoi script.
export AQUA_ROOT_DIR="${XDG_DATA_HOME:-$HOME/.local/share/aquaproj-aqua}"
export PATH="${AQUA_ROOT_DIR}/bin:$PATH"
export AQUA_GLOBAL_CONFIG=${AQUA_GLOBAL_CONFIG:-${XDG_CONFIG_HOME:-$HOME/.config}/aquaproj-aqua/aqua.yaml}

# Add some well-known directories to $PATH.
export PATH="$HOME/.local/bin:$PATH"
export PATH="$HOME/bin:$PATH"
export PATH="$HOME/.krew/bin:$PATH"

# Activate Mise: https://github.com/jdx/mise.
# Note that we manage mise by Aqua so this needs to come after aqua.
if command -v mise &> /dev/null; then eval "$(mise activate bash)"; fi
# `mise activate` is hooking in the prompt command, causing tools installed by it to not yet be available.
# This is specifically breaking `rbw` in our bashrc.
# if command -v mise &> /dev/null; then eval "$(mise hook-env -s bash)"; fi
# export PATH="$HOME/.local/share/mise/shims:$PATH"
# if command -v mise &> /dev/null; then eval "$(mise hook-env -s bash)"; fi

# Update completions by writing them in the completions directory, see https://serverfault.com/a/1013395.
# Note that for now we are immediately calling the function afterwards, but we could decide to not do this if this has performance impact.
function update_completions() {
	_completion_dir="$HOME/.local/share/bash-completion/completions"
	[ ! -d "${_completion_dir}" ] && { echo "Bash Completion directory does not exists, not updating completions" && return; }

	if command -v aqua &> /dev/null; then aqua completion bash > "${_completion_dir}/aqua.bash"; fi
	if command -v lab &> /dev/null; then lab completion bash > "${_completion_dir}/lab.bash"; fi
	if command -v glab &> /dev/null; then glab completion -s bash > "${_completion_dir}/glab.bash"; fi
	if command -v mise &> /dev/null; then mise completion bash > "${_completion_dir}/mise.bash"; fi
	if command -v rbw &> /dev/null; then rbw gen-completions bash > "${_completion_dir}/rbw.bash"; fi
  if command -v ghorg &> /dev/null; then ghorg completion bash > "${_completion_dir}/ghorg.bash"; fi

	# Unfortunately, FZF does not support a "completion bash" style script, so we've included them manually in dotfiles.
	# It might be handy to let Ansible manage them in the future, so they will always be the latest from the GitHub repo.
	# source ~/.local/share/bash-completion/completions/fzf-keybindings.bash
	source ~/.local/share/bash-completion/completions/fzf.bash
}

update_completions

if command -v git-town &> /dev/null; then eval "$(git-town completions bash)"; fi
complete -o default -F __start_git-town gt;

if command -v kubectl &> /dev/null; then eval "$(kubectl completion bash)"; fi
complete -F __start_kubectl k;

# Use another style of providing completions so excluded from the completions function.
if command -v terraform &> /dev/null; then complete -C "$(which terraform)" terraform; fi
if command -v aws_completer &> /dev/null; then complete -C "$(which aws_completer)" aws; fi

# Only commands that are needed for user should be after here.
[[ $- =~ i ]] || return 0

# load custom Bash functions
source ~/.bash_functions

if command -v rbw &> /dev/null; then
  if rbw unlocked &> /dev/null; then
    echo "🔓🗝️ Session unlocked, loading tokens from Bitwarden... 🔓🗝️"
    OPENAI_API_KEY="$(rbw get OPENAI_API_KEY)"
    export OPENAI_API_KEY && echo "✍🏾 OPENAI_API_KEY"
    gitlab_token="$(rbw get GITLAB_TOKEN)"
    export TF_HTTP_PASSWORD="$gitlab_token" && echo "✍🏾 TF_HTTP_PASSWORD" # Authentication for GitLab-Managed Terraform State
    export TF_VAR_gitlab_token="$gitlab_token" && echo "✍🏾 TF_VAR_gitlab_token" # Conventional input we use for GitLab Terraform Provider authentication
    export GITLAB_TOKEN="$gitlab_token" && echo "✍🏾 GITLAB_TOKEN"
    export GL_TOKEN="$gitlab_token" && echo "✍🏾 GL_TOKEN"
    export LAB_CORE_TOKEN="$gitlab_token" && echo "✍🏾 LAB_CORE_TOKEN"
    github_token="$(rbw get GITHUB_TOKEN)"
    export GITHUB_TOKEN="$github_token" && echo "✍🏾 GITHUB_TOKEN"
  else
    echo "🔒 Bitwarden vault locked, not loading tokens. 🔒"
    echo "💡 To load tokens run \`rbw unlock\` and execute \`source ~/.bashrc\`. 💡"
  fi
fi


[ -f "$HOME/.local/share/blesh/ble.sh" ] && source $HOME/.local/share/blesh/ble.sh

alias assume="source $(aqua which assume)"

function set_win_title(){
    echo -ne "\033]0; "$PWD" \007"
}

starship_precmd_user_func="set_win_title"

if command -v eza &> /dev/null; then
  alias ls='eza'
  alias ll='eza -al'
fi

if command -v zoxide &> /dev/null; then eval "$(zoxide init --cmd cd bash)"; fi
if command -v starship &> /dev/null; then eval "$(starship init bash --print-full-init)"; fi
if command -v atuin &> /dev/null; then eval "$(atuin init bash)"; fi

# Shell-GPT integration BASH v0.2
_sgpt_bash() {
if [[ -n "$READLINE_LINE" ]]; then
    READLINE_LINE=$(sgpt --shell <<< "$READLINE_LINE" --no-interaction)
    READLINE_POINT=${#READLINE_LINE}
fi
}
bind -x '"\C-l": _sgpt_bash'
# Shell-GPT integration BASH v0.2
